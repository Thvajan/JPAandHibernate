Inheritance Hierarchies and Mappings:
Ex: Employee -> Full Time Employee
			|-> Part Time Employee
			
Ways to achieve using JPA:
	1. Single Table
	2. Table per Class
	3. Joined
	4. Mapped Super Class

1. Single Table: Best if priority is performance
	All information related to all sub-types are stored in the same table
	@Inheritance - class level annotation. Default strategy value = InheritanceType.SINGEL_TABLE -> in Superclass
	@DiscriminatorColumn(name="User defined name")
	Single table gets created, with DType(as in Distinguisher Type) auto created by JPA which supports the values of the child class names
	Single query fired by JPA to get all employees of all types - Good performance
	Not good DB design
		I. Multiple nullable fields are req as each type needs to set null values for columns of other type(s) 
		II. Also, it can allow column null values for req records like setting full time employee with null for salary column
	
2. Table per Class:
	A Table per concrete entity(Specialized\sub classes) gets created
	@Inheritance - class level annotation. strategy value = InheritanceType.TABLE_PER_CLASS -> in Superclass
	Creates tables only for the sub-types - FullTime_Employee and PartTime_Employee
	A union query is fired by JPA to get all employees of all types:
	  select employee0_.id as id1_1_, employee0_.name as name2_1_, employee0_.salary as salary1_2_, employee0_.hourly_wage as hourly_w1_3_, employee0_.clazz_ as clazz_ 
		from (select id, name, salary, null as hourly_wage, 1 as clazz_ 
			from
				full_time_employee 
			union
			all select id, name, null as salary, hourly_wage, 2 as clazz_ 
			from
				part_time_employee 
		) employee0_
	Table per concrete class is good as it is easy to insert and good in performance
	Not good DB design:
		Common column like name and age(super class column) are repeated in all sub class tables

3. Joined - Best if priority is Data integrity and quality
	A Table per concrete entity(Specialized\sub classes) and one for the super class gets created
	@Inheritance - class level annotation. strategy value = InheritanceType.JOINED -> in Superclass
	Creates tables for the super and sub-types - Employee, FullTime_Employee and PartTime_Employee
	Common columns will be put into the Superclass table - Employee
	Join is used to fetch all data across required tables.
	Good DB Design as these are individual tables with foreign key connections
	Poor Performance on querying as it requires multiple joins
	
4. Mapped Super Class
	@MappedSuperclass to be used in the super class
	An @Entity cannot be a @MappedSuperclass
	No @Inheritance req as the sub classes are assumed to have no relationship to the Super class.
	The subclasses need to be queried separately
	Creates tables only for the sub-types - FullTime_Employee and PartTime_Employee
	Cannot query on the superclass